import org.apache.tools.ant.filters.FixCrLfFilter

import java.nio.file.Paths
import java.nio.file.Files

plugins {
    id "de.undercouch.download" version "5.4.0"
}

apply plugin: 'com.android.library'
apply from: file(rootProject.file('module.gradle'))

dependencies {
    implementation 'dev.rikka.ndk.thirdparty:cxx:1.2.0'
    implementation("dev.rikka.ndk:riru:26.0.0")
}

task downloadFrida(type: Download) {
    def downloadArchs = ["arm", "arm64", "x86_64", "x86"]
    def magiskArchs = ["arm", "arm64", "x64", "x86"]

    def sources = downloadArchs.collect{
        arch -> "https://github.com/frida/frida/releases/download/${fridaVersion}/frida-gadget-${fridaVersion}-android-${arch}.so.xz".toString()
    }

    def outputs = magiskArchs.collect{
        arch ->  "libgadget-${arch}.so.xz".toString()
    }

    def downloads = [sources, outputs].transpose().collectEntries()

    src downloads.keySet()
    dest "$rootDir/gadget"
    overwrite true
    onlyIfModified true
    quiet true
    eachFile { f ->
        f.name = downloads[f.sourceURL.toString()]
    }
}

android {
    namespace = "zygisk.frida"
    compileSdkVersion rootProject.ext.targetSdkVersion
    ndkVersion '25.2.9519653'

    flavorDimensions += "api"

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion

        externalNativeBuild {
            ndkBuild {
                arguments += "MODULE_VERSION_CODE=$moduleVersionCode"
                arguments += "MODULE_VERSION_NAME=$moduleVersion"
                arguments += "RIRU_API_VERSION=$riruApiVersion"
            }
        }

    }
    buildFeatures {
        prefab true
    }

    externalNativeBuild {
        ndkBuild {
            path "src/jni/Android.mk"
        }
    }

    productFlavors {
        all {
            externalNativeBuild {
                ndkBuild {
                    arguments += "API=${name.toLowerCase()}"
                }
            }
        }

        create("Riru") {
            dimension = "api"
        }

        create("Zygisk") {
            dimension = "api"
        }
    }
}

afterEvaluate {
    android.libraryVariants.forEach { variant ->
        def variantCapped = variant.name.capitalize()
        def variantLowered = variant.name.toLowerCase()

        def zipName = "${moduleName}-${moduleVersion}-${variantLowered}.zip"
        def magiskDir = file("$outDir/magisk_module_$variantLowered")

        task("prepareMagiskFiles${variantCapped}", type: Sync) {
            dependsOn("assemble$variantCapped")
            dependsOn downloadFrida

            def templatePath = "$rootDir/template/magisk_module"

            into magiskDir
            from(templatePath) {
                exclude 'module.prop'
            }
            from(templatePath) {
                include 'module.prop'
                expand([
                        id         : magiskModuleId,
                        name       : moduleName,
                        version    : moduleVersion,
                        versionCode: moduleVersionCode.toString(),
                        author     : moduleAuthor,
                        description: moduleDescription,
                ])
                filter(FixCrLfFilter.class,
                        eol: FixCrLfFilter.CrLf.newInstance("lf"))
            }
            from("$buildDir/intermediates/stripped_native_libs/$variantLowered/out/lib") {
                into 'lib'
            }
            from("$rootDir/gadget") {
                exclude '.gitkeep'
                into 'gadget'
            }
            doLast {
                file("$magiskDir/zygisk").mkdir()
                fileTree("$magiskDir/lib").visit { f ->
                    if (!f.directory) return
                    def srcPath = Paths.get("${f.file.absolutePath}/lib${moduleLibraryName}.so")
                    def dstPath = Paths.get("$magiskDir/zygisk/${f.path}.so")
                    Files.move(srcPath, dstPath)
                }
                new File("$magiskDir/lib").deleteDir()
            }
        }

        task("zip${variantCapped}", type: Zip) {
            dependsOn("prepareMagiskFiles${variantCapped}")
            from magiskDir
            archiveFileName.set(zipName)
            destinationDirectory.set(outDir)
        }

        task("push${variantCapped}", type: Exec) {
            dependsOn("zip${variantCapped}")
            workingDir outDir
            commandLine android.adbExecutable, "push", zipName, "/data/local/tmp/"
        }

        task("flash${variantCapped}", type: Exec) {
            dependsOn("push${variantCapped}")
            commandLine android.adbExecutable, "shell", "su", "-c",
                    "magisk --install-module /data/local/tmp/${zipName}"
        }

        task("flashAndReboot${variantCapped}", type: Exec) {
            dependsOn("flash${variantCapped}")
            commandLine android.adbExecutable, "shell", "reboot"
        }

        variant.assembleProvider.get().finalizedBy("zip${variantCapped}")
    }
}
